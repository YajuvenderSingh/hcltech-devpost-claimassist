AWSTemplateFormatVersion: '2010-09-09'
Description: 'NMM Orchestration Lambda Function for Claim Processing Workflow'

Parameters:
  FunctionName:
    Type: String
    Default: 'nmm-orchestration-lambda'
    Description: 'Name for the Lambda function'
  
  IAMRoleName:
    Type: String
    Default: 'HCL-User-Role-Aiml-lambda'
    Description: 'IAM role name (must be created separately)'
  
  DynamoDBTableName:
    Type: String
    Default: 'claimassistv2-claimdetails'
    Description: 'DynamoDB table name for claim details'

Resources:
  # DynamoDB Table for Claim Details
  ClaimDetailsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: claimid
          AttributeType: S
      KeySchema:
        - AttributeName: claimid
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # SQS Queue for Document Processing
  DocumentProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${FunctionName}-doc-processing-queue'
      VisibilityTimeoutSeconds: 300
      MessageRetentionPeriod: 1209600  # 14 days
      ReceiveMessageWaitTimeSeconds: 20

  # SQS Queue for PS Processing
  PSProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${FunctionName}-ps-processing-queue'
      VisibilityTimeoutSeconds: 300
      MessageRetentionPeriod: 1209600  # 14 days
      ReceiveMessageWaitTimeSeconds: 20

  # Lambda Function
  OrchestrationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${IAMRoleName}'
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          
          headers = {
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Headers': '*',
              'Access-Control-Allow-Methods': '*',
          }
          
          def lambda_handler(event, context):
              try:
                  print(f"Received event: {event}")
                  
                  if 'body' in event:
                      body = json.loads(event['body']) if isinstance(event['body'], str) else event['body']
                  else:
                      body = event
                  
                  tasktype = body.get('tasktype')
                  print(f"Task type: {tasktype}")
                  
                  # Basic response for deployment
                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps({
                          'message': 'Orchestration Lambda deployed successfully',
                          'tasktype': tasktype
                      })
                  }
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({
                          'error': 'Internal server error',
                          'details': str(e)
                      })
                  }
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref ClaimDetailsTable
          SQS_QUEUE_URL: !Ref DocumentProcessingQueue
          PS_SQS_QUEUE_URL: !Ref PSProcessingQueue
      Timeout: 180
      MemorySize: 4096
      EphemeralStorage:
        Size: 4096
      Description: 'Orchestration Lambda for claim processing workflow'

Outputs:
  LambdaFunctionArn:
    Description: 'ARN of the Lambda function'
    Value: !GetAtt OrchestrationLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaArn'
  
  DynamoDBTableName:
    Description: 'Name of the DynamoDB table'
    Value: !Ref ClaimDetailsTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTable'
  
  DocumentProcessingQueueUrl:
    Description: 'URL of the document processing SQS queue'
    Value: !Ref DocumentProcessingQueue
    Export:
      Name: !Sub '${AWS::StackName}-DocQueue'
  
  PSProcessingQueueUrl:
    Description: 'URL of the PS processing SQS queue'
    Value: !Ref PSProcessingQueue
    Export:
      Name: !Sub '${AWS::StackName}-PSQueue'
